#!/usr/bin/env node
const fs            = require("fs");
const path          = require("path");
const m2j           = require("md-2-json");
const marked        = require("marked");
const config_path   = process.argv[2];
const raw_md_config = fs.readFileSync(config_path).toString()
const raw_config    = marked.lexer(raw_md_config)
const acts_str      = raw_config
                      .filter(e => e.type === "code")
                      .map(e => e.text)
const config        = {}

const template      = fs.readFileSync("./template.ini")
  .toString();
const render        = o => Object.keys(o)
  .reduce((tmp, name) =>
    tmp.replace(new RegExp("{{" + name + "}}", "g"), o[name]), template)

const make_abi_dsl = ({type, name}, i) =>
  "#" + type + "(ABI_" + name + ")"
const make_args = inputs => inputs.length == 0
    && ".TypedArgs"
    || inputs.map(make_abi_dsl).join(", ")

const bound = {
  "uint256": name => `#rangeUInt(256, ${ name })`,
  "int256" : name => `#rangeSInt(256, ${ name })`,
  "bytes32": name => `#rangeBytes(32, ${ name })`,
  "address": name => `#rangeAddress(${ name })`
}
const toK = str => str
  .replace(/ \+ /g, " +Int ")
  .replace(/ \- /g, " -Int ")
  .replace(/ \* /g, " *Int ")
  .replace(/ \/ /g, " /Int ")
  .replace(/ \<\= /g, " <=Int ")
  .replace(/ \>\= /g, " >=Int ")
  .replace(/ \=\= /g, " ==Int ")
  .replace(/ \=\/\= /g, " =/=Int ")
  .replace(/ and /g, " andBool ")
  .replace(/ or /g, " orBool ")
  .replace(/ not /g, " notBool ")
const unsignedWrap = (types, str) => str in types
  && types[str] == "int256"
  && "#unsigned(" + str + ")"
  || str
const mapInterface = (is, str) => {
  is.forEach(([t, n]) => {
    str = str.replace(new RegExp(n + "([^\\w]|$)", "g"), (a, b, c) => {
      return "ABI_" + n + b;
    })
  })
  return str;
}

let acts = acts_str
  .map(e => {
    let _act = e
      .split("\n")
      .reduce(([c, a], l) => {
          if(/^[^\s]/.test(l)) {
            if(c.length > 0) a = a.concat([c])
            c = [l]
          } else {
            c = c.concat([l])
          }
        return [c, a];
      }, [[], []])
    let act_arr = _act[1].concat([_act[0]])
    let act = act_arr
      .reduce((a, e) => {
        let head = e[0];
        let tail = e.slice(1)
        if(/^behaviour/.test(head)) {
          a.name    = head.split(" ")[1]
          a.subject = head.split(" ")[3]
        } else if(/^interface/.test(head)) {
          const interface_str = head
            .split(" ")
            .slice(1)
            .join(" ");
          const interface  = interface_str
            .match(/\(([^\)]*)\)/)[1]
            .split(", ")
            .map(l => l.split(" "))
          const _interface_types = interface
            .reduce((a, [v, k]) => {
              a[k] = v;
              return a;
            }, {})
          const fname = interface_str.slice(0, interface_str.indexOf("("))
          a.callData = `#abiCallData("${fname}", ${make_args(interface.map(([type, name]) => ({type, name})))})`
          a.signature = fname + "(" + interface
            .map(([t, v]) => t).join(",") + ")"
          a.types = {
            ...a.types,
            ..._interface_types
          }
          a.interface = interface;
        } else if(/^types/.test(head)) {
          let _types = tail
            .map(l => l.trim())
            .filter(l => l != "")
            .map(l => l.split(":").map(i => i.trim()))
            .reduce((a, [k, v]) => {
              a[k] = v;
              return a;
            }, {})
          a.types = {
            ...a.types,
            ..._types
          }
        } else if(/^storage/.test(head)) {
          let name = head.split(" ")[1] || "ACCT_ID";
          let _storage = tail
            .map(l => mapInterface(a.interface, l.trim()))
            .filter(l => l != "")
            .map(l => l.split("|->").map(i => toK(i).trim()))
            .map(([k, v]) => {
              if(v.indexOf("=>") > -1) {
                v = v.split("=>").map(i => unsignedWrap(a.types, i.trim()))
              } else {
                v = [unsignedWrap(a.types, v)]
              }
              return [k, v];
            })
            .reduce((a, [k, v]) => {
              a[k] = v;
              return a;
            }, {})
          a.storage = {
            ...a.storage,
            [name]: _storage
          }
        } else if(/^iff/.test(head)) {
          let _iff = tail
            .map(l => mapInterface(a.interface, toK(l).trim()))
            .filter(l => l != "")
          if(head.indexOf("in range") > -1) {
            let range = bound[head.split(" in range ")[1]]
            _iff = _iff
              .map(l => range(l))
          }
          a.iff = (a.iff || []).concat( _iff )
        } else if(/^returns/.test(head)) {
          a.returns = head.split(" ").slice(1).join(" ") + " : .wordStack"
        }

        return a;
      }, {})
    return act;
  })


// let toObject = (str, d = ":") => str
//   .split("\n")
//   .map(e => e.split(d))
//   .reduce((a, [k, v]) => { a[k.trim()] = v.trim(); return a; }, {})
//
// let toStorage = str => str.split("\n")

// let lvl1_config = tmp.o[Object.keys(tmp.o)[0]]
// const global_vars   = toObject(lvl1_config.defaults.vars.data[0]);
// const global_stores = toObject(lvl1_config.defaults.storage.data[0], "|->");
//

let behaviours = acts
  .map(act => {

    const storage_success = "  " + Object.keys(act.storage.ACCT_ID || [])
      .map(key => key + " |-> (" + act.storage.ACCT_ID[key].join(" => ") + ")" )
      .join("\n  " + " ".repeat(14))
    const cond_success = (act.iff || [])
      .map(c => "  andBool " + c)
      .join("\n")

    const storage_fail = "  " + Object.keys(act.storage.ACCT_ID || [])
      .map(key => key + " |-> (" + act.storage.ACCT_ID[key][0] + (act.storage.ACCT_ID[key].length > 1 ? " => _ " : "") + ")" )
      .join("\n  " + " ".repeat(14))
    const cond_fail = "notBool (\n" + (act.iff || [])
      .map(c => "  andBool " + c)
      .join("\n") + ")"

    const accounts = Object.keys(act.storage || {})
      .filter(name => name != "ACCT_ID")
      .map(name => {
        let code = fs.readFileSync("dss/out/" + name + ".bin-runtime") // TODO
        let fstore = Object.keys(act.storage[name])
          .map(key => key + " |-> (" + act.storage[name][key].join(" => ") + ")")
          .join("\n" + " ".repeat(12))

        return `<account>
          <acctID> ${name} </acctID>
          <balance> _ </balance>
          <code> #parseByteStack("0x${code}") </code>
          <storage>
            ${fstore}
          </storage>
          <nonce> _ </nonce>
        </account>
        `
      })
      .join("\n")

    const accounts_fail = Object.keys(act.storage || {})
      .filter(name => name != "ACCT_ID")
      .map(name => {
        let code = fs.readFileSync("dss/out/" + name + ".bin-runtime") // TODO
        let fstore = Object.keys(act.storage[name])
          .map(key => key + " |-> (" + act.storage[name][key][0] + (act.storage[name][key].length > 1 ? " => _ " : "") + ")" )
          .join("\n"+" ".repeat(12))

        return `<account>
          <acctID> ${name} </acctID>
          <balance> _ </balance>
          <code> #parseByteStack("0x${code}") </code>
          <storage>
            ${fstore}
          </storage>
          <nonce> _ </nonce>
        </account>
        `
      })
      .join("\n")

    const activeaccounts = Object.keys(act.storage || {})
      .filter(name => name !== "ACCT_ID")
      .map(name => `SetItem(${name})`)
      .join(" ")

    const filename = act.subject + "_" + act.signature.replace(/\(|\)|\,/g, "_")

    const cases = [{
      name: "success_" + filename,
      spec: render({
        name: act.name,
        callData: act.callData,
        cond: cond_success,
        storage: storage_success,
        returns: act.returns || "_",
        status: "EVMC_SUCCESS",
        activeaccounts,
        accounts
      })
    }];

    if((act.iff || []).length > 0) {
      cases.push({
        name: "fail_" + filename,
        spec: render({
          name: act.name,
          callData: act.callData,
          cond: cond_fail,
          storage: storage_fail,
          returns: "_",
          status: "EVMC_REVERT",
          activeaccounts,
          accounts: accounts_fail
        })
      })
    }
    return cases;
  })
  .reduce((a, cs) => a.concat(cs), [])

try {
  fs.accessSync("out", fs.constants.F_OK);
} catch (e) {
  fs.mkdirSync("out");
}

behaviours
  .forEach(({spec, name}) => {
    fs.writeFileSync("out/" + name + ".ini", spec)
  })

process.exit();


const filename      = path.basename(config_path, ".md");
const abifile_name  = "dss/out/Lad.abi"; // TODO



let abit = Object.keys(lvl1_config.methods)
  .map(name => ({
    vars: lvl1_config.methods[name].vars && toObject(lvl1_config.methods[name].vars.data[0]) || {},
    stores: lvl1_config.methods[name].storage && toObject(lvl1_config.methods[name].storage.data[0] , "|->") || [],
    requires: lvl1_config.methods[name].requires && toStorage(lvl1_config.methods[name].requires.data[0]) || [],
    returns: lvl1_config.methods[name].returns && lvl1_config.methods[name].returns.data[0] || "",
    foreign_stores: lvl1_config.methods[name].foreign_stores,
    abi: name.indexOf("(") == -1
           ? abi.find(fabi => fabi.name == name)
           : abi.find(fabi => fabi.name + "(" + fabi.inputs.map(i => i.type).join(",") + ")" == name )
  }))
  .filter(({abi}) => abi.type == "function")
  .map(({abi, vars, stores, requires, returns, foreign_stores}) => {

    const local_vars = {
      ...global_vars,
      ...vars
    }
    const local_stores = {
      ...global_stores,
      ...stores
    }

    const storage_success = "  " + Object.keys(local_stores)
      .map(key => key + " |-> (" + local_stores[key] + ")" )
      .join("\n  ")

    const vars_in_range = Object.keys(local_vars)
      .map(name => `andBool ${bound[local_vars[name]](name)}`)


    let callData = `#abiCallData("${abi.name}", ${make_args(abi.inputs)})`
    let abi_var_in_range = abi.inputs
      .filter(({name}) => !local_vars["ABI_" + name])
      .map(({type, name}, i) => `andBool ${ bound[type]("ABI_" + name) }` )

    let fabi_success = (requires || [])
      .map(c => `andBool ` + c)
    let cond_success = (abi_var_in_range.length > 0 ? ["\n  // call data"] : [])
      .concat(abi_var_in_range)
      .concat(["\n  // storage data"])
      .concat(vars_in_range)
      .concat(["\n  // success conditions"])
      .concat(fabi_success)
      .join("\n  ")

    const storage_fail = "  " + Object.keys(local_stores)
      .map(key => key + " |-> " + (local_stores[key].indexOf("=>") > -1 ? "(" + local_stores[key].split("=>")[0] + "=> _)" : local_stores[key]) )
      .join("\n  ")
    let fabi_fail = ["notBool (\n            " + (requires || []).join("\n    andBool ") + "\n  )"]
      .map(c => `andBool ` + c)
    let cond_fail = (abi_var_in_range.length > 0 ? ["\n  // call data"] : [])
      .concat(abi_var_in_range)
      .concat(["\n  // storage data"])
      .concat(vars_in_range)
      .concat(["\n  // success conditions"])
      .concat(fabi_fail)
      .join("\n  ")


    let accounts = Object.keys(foreign_stores || {})
      .map(name => {
        let code = fs.readFileSync("dss/out/" + name + ".bin-runtime")
        let fstore = toObject(foreign_stores[name].data[0], "|->");
        let stores_ = Object.keys(fstore)
          .map(key => key + " |-> (" + fstore[key] + ")" )
          .join("\n  ")

        return `<account>
          <acctID> ${name} </acctID>
          <balance> _ </balance>
          <code> #parseByteStack("0x${code}") </code>
          <storage>
            ${stores_}
          </storage>
          <nonce> _ </nonce>
        </account>
        `
      })
      .join("\n")

    let activeaccounts = Object.keys(foreign_stores || {})
      .map(name => `SetItem(${name})`)
      .join(" ")


    const filename = abi.name + "_" + abi.inputs.map(i => i.type).join("_")

    let cases = [{
      name: "success_" + filename,
      spec: render({
        name: abi.name,
        callData,
        cond: cond_success,
        storage: storage_success,
        returns: returns || "_",
        status: "EVMC_SUCCESS",
        activeaccounts,
        accounts
      })
    }];

    if((requires || []).length > 0) {
      cases.push({
        name: "fail_" + filename,
        spec: render({
          name: abi.name,
          callData,
          cond: cond_fail,
          storage: storage_fail,
          returns: "_",
          status: "EVMC_REVERT",
          activeaccounts,
          accounts
        })
      })
    }
    return cases;

  })
  .reduce((a, cs) => a.concat(cs), [])

try {
  fs.accessSync("out", fs.constants.F_OK);
} catch (e) {
  fs.mkdirSync("out");
}

abit
  .forEach(({spec, name}) => {
    fs.writeFileSync("out/" + filename + "_" + name + ".ini", spec)
  })


// console.log(abit[0]);
